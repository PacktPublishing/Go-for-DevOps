// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.18.0
// source: lb.proto

package lb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PoolType indicates what type of pool to use. This influences
// how the pool distributes its workload.
type PoolType int32

const (
	// This indicates an error by the user.
	PoolType_PT_UNKNOWN PoolType = 0
	// The power of 2 choices selection pool.
	PoolType_PT_P2C PoolType = 1
)

// Enum value maps for PoolType.
var (
	PoolType_name = map[int32]string{
		0: "PT_UNKNOWN",
		1: "PT_P2C",
	}
	PoolType_value = map[string]int32{
		"PT_UNKNOWN": 0,
		"PT_P2C":     1,
	}
)

func (x PoolType) Enum() *PoolType {
	p := new(PoolType)
	*p = x
	return p
}

func (x PoolType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PoolType) Descriptor() protoreflect.EnumDescriptor {
	return file_lb_proto_enumTypes[0].Descriptor()
}

func (PoolType) Type() protoreflect.EnumType {
	return &file_lb_proto_enumTypes[0]
}

func (x PoolType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PoolType.Descriptor instead.
func (PoolType) EnumDescriptor() ([]byte, []int) {
	return file_lb_proto_rawDescGZIP(), []int{0}
}

type PoolStatus int32

const (
	// This indicates an error by the developers.
	PoolStatus_PS_UNKNOWN PoolStatus = 0
	// The pool has all its configured backends working.
	PoolStatus_PS_FULL PoolStatus = 1
	// The pool has no configured backends.
	PoolStatus_PS_EMPTY PoolStatus = 2
	// The pool has one or more configured backends not working.
	PoolStatus_PS_DEGRADED PoolStatus = 3
)

// Enum value maps for PoolStatus.
var (
	PoolStatus_name = map[int32]string{
		0: "PS_UNKNOWN",
		1: "PS_FULL",
		2: "PS_EMPTY",
		3: "PS_DEGRADED",
	}
	PoolStatus_value = map[string]int32{
		"PS_UNKNOWN":  0,
		"PS_FULL":     1,
		"PS_EMPTY":    2,
		"PS_DEGRADED": 3,
	}
)

func (x PoolStatus) Enum() *PoolStatus {
	p := new(PoolStatus)
	*p = x
	return p
}

func (x PoolStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PoolStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_lb_proto_enumTypes[1].Descriptor()
}

func (PoolStatus) Type() protoreflect.EnumType {
	return &file_lb_proto_enumTypes[1]
}

func (x PoolStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PoolStatus.Descriptor instead.
func (PoolStatus) EnumDescriptor() ([]byte, []int) {
	return file_lb_proto_rawDescGZIP(), []int{1}
}

// BackendStatus details the status of a backend.
type BackendStatus int32

const (
	// This indicates an error by the developers.
	BackendStatus_BS_UNKNOWN BackendStatus = 0
	// The node is healthy according to its health checks.
	BackendStatus_BS_HEALTHY BackendStatus = 1
	// The node is sick according to its health checks.
	BackendStatus_BS_SICK BackendStatus = 2
)

// Enum value maps for BackendStatus.
var (
	BackendStatus_name = map[int32]string{
		0: "BS_UNKNOWN",
		1: "BS_HEALTHY",
		2: "BS_SICK",
	}
	BackendStatus_value = map[string]int32{
		"BS_UNKNOWN": 0,
		"BS_HEALTHY": 1,
		"BS_SICK":    2,
	}
)

func (x BackendStatus) Enum() *BackendStatus {
	p := new(BackendStatus)
	*p = x
	return p
}

func (x BackendStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BackendStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_lb_proto_enumTypes[2].Descriptor()
}

func (BackendStatus) Type() protoreflect.EnumType {
	return &file_lb_proto_enumTypes[2]
}

func (x BackendStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BackendStatus.Descriptor instead.
func (BackendStatus) EnumDescriptor() ([]byte, []int) {
	return file_lb_proto_rawDescGZIP(), []int{2}
}

type HealthChecks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HealthChecks []*HealthCheck `protobuf:"bytes,1,rep,name=health_checks,json=healthChecks,proto3" json:"health_checks,omitempty"`
	IntervalSecs int32          `protobuf:"varint,2,opt,name=interval_secs,json=intervalSecs,proto3" json:"interval_secs,omitempty"`
}

func (x *HealthChecks) Reset() {
	*x = HealthChecks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthChecks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthChecks) ProtoMessage() {}

func (x *HealthChecks) ProtoReflect() protoreflect.Message {
	mi := &file_lb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthChecks.ProtoReflect.Descriptor instead.
func (*HealthChecks) Descriptor() ([]byte, []int) {
	return file_lb_proto_rawDescGZIP(), []int{0}
}

func (x *HealthChecks) GetHealthChecks() []*HealthCheck {
	if x != nil {
		return x.HealthChecks
	}
	return nil
}

func (x *HealthChecks) GetIntervalSecs() int32 {
	if x != nil {
		return x.IntervalSecs
	}
	return 0
}

type HealthCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to HealthCheck:
	//	*HealthCheck_StatusCheck
	HealthCheck isHealthCheck_HealthCheck `protobuf_oneof:"health_check"`
}

func (x *HealthCheck) Reset() {
	*x = HealthCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheck) ProtoMessage() {}

func (x *HealthCheck) ProtoReflect() protoreflect.Message {
	mi := &file_lb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheck.ProtoReflect.Descriptor instead.
func (*HealthCheck) Descriptor() ([]byte, []int) {
	return file_lb_proto_rawDescGZIP(), []int{1}
}

func (m *HealthCheck) GetHealthCheck() isHealthCheck_HealthCheck {
	if m != nil {
		return m.HealthCheck
	}
	return nil
}

func (x *HealthCheck) GetStatusCheck() *StatusCheck {
	if x, ok := x.GetHealthCheck().(*HealthCheck_StatusCheck); ok {
		return x.StatusCheck
	}
	return nil
}

type isHealthCheck_HealthCheck interface {
	isHealthCheck_HealthCheck()
}

type HealthCheck_StatusCheck struct {
	StatusCheck *StatusCheck `protobuf:"bytes,1,opt,name=status_check,json=statusCheck,proto3,oneof"`
}

func (*HealthCheck_StatusCheck) isHealthCheck_HealthCheck() {}

// StatusCheck is a check against a URL path. That path must
// emit in its body one of the healthy_values or it fails.
type StatusCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UrlPath       string   `protobuf:"bytes,1,opt,name=url_path,json=urlPath,proto3" json:"url_path,omitempty"`
	HealthyValues []string `protobuf:"bytes,2,rep,name=healthy_values,json=healthyValues,proto3" json:"healthy_values,omitempty"`
}

func (x *StatusCheck) Reset() {
	*x = StatusCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusCheck) ProtoMessage() {}

func (x *StatusCheck) ProtoReflect() protoreflect.Message {
	mi := &file_lb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusCheck.ProtoReflect.Descriptor instead.
func (*StatusCheck) Descriptor() ([]byte, []int) {
	return file_lb_proto_rawDescGZIP(), []int{2}
}

func (x *StatusCheck) GetUrlPath() string {
	if x != nil {
		return x.UrlPath
	}
	return ""
}

func (x *StatusCheck) GetHealthyValues() []string {
	if x != nil {
		return x.HealthyValues
	}
	return nil
}

type Backend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Backend:
	//	*Backend_IpBackend
	Backend isBackend_Backend `protobuf_oneof:"backend"`
}

func (x *Backend) Reset() {
	*x = Backend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backend) ProtoMessage() {}

func (x *Backend) ProtoReflect() protoreflect.Message {
	mi := &file_lb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backend.ProtoReflect.Descriptor instead.
func (*Backend) Descriptor() ([]byte, []int) {
	return file_lb_proto_rawDescGZIP(), []int{3}
}

func (m *Backend) GetBackend() isBackend_Backend {
	if m != nil {
		return m.Backend
	}
	return nil
}

func (x *Backend) GetIpBackend() *IPBackend {
	if x, ok := x.GetBackend().(*Backend_IpBackend); ok {
		return x.IpBackend
	}
	return nil
}

type isBackend_Backend interface {
	isBackend_Backend()
}

type Backend_IpBackend struct {
	IpBackend *IPBackend `protobuf:"bytes,1,opt,name=ip_backend,json=ipBackend,proto3,oneof"`
}

func (*Backend_IpBackend) isBackend_Backend() {}

// IPBackend provides a Backend that has its endpoint as an ip:port.
type IPBackend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The IP(v4 or v6) to use as the host.
	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	// The port number to connect on.
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// The url_path to forward to. Generally this is empty.
	UrlPath string `protobuf:"bytes,3,opt,name=url_path,json=urlPath,proto3" json:"url_path,omitempty"`
}

func (x *IPBackend) Reset() {
	*x = IPBackend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPBackend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPBackend) ProtoMessage() {}

func (x *IPBackend) ProtoReflect() protoreflect.Message {
	mi := &file_lb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPBackend.ProtoReflect.Descriptor instead.
func (*IPBackend) Descriptor() ([]byte, []int) {
	return file_lb_proto_rawDescGZIP(), []int{4}
}

func (x *IPBackend) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *IPBackend) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *IPBackend) GetUrlPath() string {
	if x != nil {
		return x.UrlPath
	}
	return ""
}

// PoolHealth details the health status of a pool.
type PoolHealth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of the pool.
	Status PoolStatus `protobuf:"varint,1,opt,name=status,proto3,enum=rollout.lb.PoolStatus" json:"status,omitempty"`
	// The pool's backend health status. This can contain all backends
	// or only sick/healthy backends, depending on the request.
	Backends []*BackendHealth `protobuf:"bytes,2,rep,name=backends,proto3" json:"backends,omitempty"`
}

func (x *PoolHealth) Reset() {
	*x = PoolHealth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolHealth) ProtoMessage() {}

func (x *PoolHealth) ProtoReflect() protoreflect.Message {
	mi := &file_lb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolHealth.ProtoReflect.Descriptor instead.
func (*PoolHealth) Descriptor() ([]byte, []int) {
	return file_lb_proto_rawDescGZIP(), []int{5}
}

func (x *PoolHealth) GetStatus() PoolStatus {
	if x != nil {
		return x.Status
	}
	return PoolStatus_PS_UNKNOWN
}

func (x *PoolHealth) GetBackends() []*BackendHealth {
	if x != nil {
		return x.Backends
	}
	return nil
}

// BackendHealth details the health status of a backend.
type BackendHealth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Backend *Backend      `protobuf:"bytes,1,opt,name=backend,proto3" json:"backend,omitempty"`
	Status  BackendStatus `protobuf:"varint,2,opt,name=status,proto3,enum=rollout.lb.BackendStatus" json:"status,omitempty"`
}

func (x *BackendHealth) Reset() {
	*x = BackendHealth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackendHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackendHealth) ProtoMessage() {}

func (x *BackendHealth) ProtoReflect() protoreflect.Message {
	mi := &file_lb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackendHealth.ProtoReflect.Descriptor instead.
func (*BackendHealth) Descriptor() ([]byte, []int) {
	return file_lb_proto_rawDescGZIP(), []int{6}
}

func (x *BackendHealth) GetBackend() *Backend {
	if x != nil {
		return x.Backend
	}
	return nil
}

func (x *BackendHealth) GetStatus() BackendStatus {
	if x != nil {
		return x.Status
	}
	return BackendStatus_BS_UNKNOWN
}

// AddPoolReq requests to create a pool for handling requests.
type AddPoolReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URL pattern to direct traffic too.
	Pattern string `protobuf:"bytes,1,opt,name=pattern,proto3" json:"pattern,omitempty"`
	// The type of traffic distribution pool to use.
	PoolType PoolType `protobuf:"varint,2,opt,name=pool_type,json=poolType,proto3,enum=rollout.lb.PoolType" json:"pool_type,omitempty"`
	// Health checks to against backends.
	HealthChecks *HealthChecks `protobuf:"bytes,4,opt,name=health_checks,json=healthChecks,proto3" json:"health_checks,omitempty"`
}

func (x *AddPoolReq) Reset() {
	*x = AddPoolReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPoolReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPoolReq) ProtoMessage() {}

func (x *AddPoolReq) ProtoReflect() protoreflect.Message {
	mi := &file_lb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPoolReq.ProtoReflect.Descriptor instead.
func (*AddPoolReq) Descriptor() ([]byte, []int) {
	return file_lb_proto_rawDescGZIP(), []int{7}
}

func (x *AddPoolReq) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *AddPoolReq) GetPoolType() PoolType {
	if x != nil {
		return x.PoolType
	}
	return PoolType_PT_UNKNOWN
}

func (x *AddPoolReq) GetHealthChecks() *HealthChecks {
	if x != nil {
		return x.HealthChecks
	}
	return nil
}

// AddPoolResp is the response to adding a pool.
type AddPoolResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddPoolResp) Reset() {
	*x = AddPoolResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPoolResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPoolResp) ProtoMessage() {}

func (x *AddPoolResp) ProtoReflect() protoreflect.Message {
	mi := &file_lb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPoolResp.ProtoReflect.Descriptor instead.
func (*AddPoolResp) Descriptor() ([]byte, []int) {
	return file_lb_proto_rawDescGZIP(), []int{8}
}

// RemovePoolReq is used to remove a pool by its pattern.
type RemovePoolReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pattern is the pattern to remove.
	Pattern string `protobuf:"bytes,1,opt,name=pattern,proto3" json:"pattern,omitempty"`
}

func (x *RemovePoolReq) Reset() {
	*x = RemovePoolReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lb_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePoolReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePoolReq) ProtoMessage() {}

func (x *RemovePoolReq) ProtoReflect() protoreflect.Message {
	mi := &file_lb_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePoolReq.ProtoReflect.Descriptor instead.
func (*RemovePoolReq) Descriptor() ([]byte, []int) {
	return file_lb_proto_rawDescGZIP(), []int{9}
}

func (x *RemovePoolReq) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

// RemovePoolResp is the response to removing a pool.
type RemovePoolResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemovePoolResp) Reset() {
	*x = RemovePoolResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lb_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePoolResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePoolResp) ProtoMessage() {}

func (x *RemovePoolResp) ProtoReflect() protoreflect.Message {
	mi := &file_lb_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePoolResp.ProtoReflect.Descriptor instead.
func (*RemovePoolResp) Descriptor() ([]byte, []int) {
	return file_lb_proto_rawDescGZIP(), []int{10}
}

// AddBackendReq adds a backend to a pool.
type AddBackendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The pattern to add a backend to.
	Pattern string `protobuf:"bytes,1,opt,name=pattern,proto3" json:"pattern,omitempty"`
	// The backend to add to the pool.
	Backend *Backend `protobuf:"bytes,2,opt,name=backend,proto3" json:"backend,omitempty"`
}

func (x *AddBackendReq) Reset() {
	*x = AddBackendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lb_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddBackendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBackendReq) ProtoMessage() {}

func (x *AddBackendReq) ProtoReflect() protoreflect.Message {
	mi := &file_lb_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBackendReq.ProtoReflect.Descriptor instead.
func (*AddBackendReq) Descriptor() ([]byte, []int) {
	return file_lb_proto_rawDescGZIP(), []int{11}
}

func (x *AddBackendReq) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *AddBackendReq) GetBackend() *Backend {
	if x != nil {
		return x.Backend
	}
	return nil
}

type AddBackendResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddBackendResp) Reset() {
	*x = AddBackendResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lb_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddBackendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBackendResp) ProtoMessage() {}

func (x *AddBackendResp) ProtoReflect() protoreflect.Message {
	mi := &file_lb_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBackendResp.ProtoReflect.Descriptor instead.
func (*AddBackendResp) Descriptor() ([]byte, []int) {
	return file_lb_proto_rawDescGZIP(), []int{12}
}

// RemoveBackendReq is used to remove a Backend from a Pool.
type RemoveBackendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The pool pattern to remove the backend from.
	Pattern string `protobuf:"bytes,1,opt,name=pattern,proto3" json:"pattern,omitempty"`
	// The backend to remove from the pool.
	Backend *Backend `protobuf:"bytes,2,opt,name=backend,proto3" json:"backend,omitempty"`
}

func (x *RemoveBackendReq) Reset() {
	*x = RemoveBackendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lb_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveBackendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveBackendReq) ProtoMessage() {}

func (x *RemoveBackendReq) ProtoReflect() protoreflect.Message {
	mi := &file_lb_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveBackendReq.ProtoReflect.Descriptor instead.
func (*RemoveBackendReq) Descriptor() ([]byte, []int) {
	return file_lb_proto_rawDescGZIP(), []int{13}
}

func (x *RemoveBackendReq) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *RemoveBackendReq) GetBackend() *Backend {
	if x != nil {
		return x.Backend
	}
	return nil
}

// RemoveBackendResp is the response to removing a Backend.
type RemoveBackendResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveBackendResp) Reset() {
	*x = RemoveBackendResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lb_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveBackendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveBackendResp) ProtoMessage() {}

func (x *RemoveBackendResp) ProtoReflect() protoreflect.Message {
	mi := &file_lb_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveBackendResp.ProtoReflect.Descriptor instead.
func (*RemoveBackendResp) Descriptor() ([]byte, []int) {
	return file_lb_proto_rawDescGZIP(), []int{14}
}

// PoolHealthReq is a request to get the health of a pool.
type PoolHealthReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pattern is the pool pattern you are getting health for.
	Pattern string `protobuf:"bytes,1,opt,name=pattern,proto3" json:"pattern,omitempty"`
	// If set to true, will return the backends that are healthy.
	Healthy bool `protobuf:"varint,3,opt,name=healthy,proto3" json:"healthy,omitempty"`
	// If set to true, will return backends that are sick.
	Sick bool `protobuf:"varint,4,opt,name=sick,proto3" json:"sick,omitempty"`
}

func (x *PoolHealthReq) Reset() {
	*x = PoolHealthReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lb_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolHealthReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolHealthReq) ProtoMessage() {}

func (x *PoolHealthReq) ProtoReflect() protoreflect.Message {
	mi := &file_lb_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolHealthReq.ProtoReflect.Descriptor instead.
func (*PoolHealthReq) Descriptor() ([]byte, []int) {
	return file_lb_proto_rawDescGZIP(), []int{15}
}

func (x *PoolHealthReq) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *PoolHealthReq) GetHealthy() bool {
	if x != nil {
		return x.Healthy
	}
	return false
}

func (x *PoolHealthReq) GetSick() bool {
	if x != nil {
		return x.Sick
	}
	return false
}

type PoolHealthResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Health *PoolHealth `protobuf:"bytes,1,opt,name=health,proto3" json:"health,omitempty"`
}

func (x *PoolHealthResp) Reset() {
	*x = PoolHealthResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lb_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolHealthResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolHealthResp) ProtoMessage() {}

func (x *PoolHealthResp) ProtoReflect() protoreflect.Message {
	mi := &file_lb_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolHealthResp.ProtoReflect.Descriptor instead.
func (*PoolHealthResp) Descriptor() ([]byte, []int) {
	return file_lb_proto_rawDescGZIP(), []int{16}
}

func (x *PoolHealthResp) GetHealth() *PoolHealth {
	if x != nil {
		return x.Health
	}
	return nil
}

var File_lb_proto protoreflect.FileDescriptor

var file_lb_proto_rawDesc = []byte{
	0x0a, 0x08, 0x6c, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x72, 0x6f, 0x6c, 0x6c,
	0x6f, 0x75, 0x74, 0x2e, 0x6c, 0x62, 0x22, 0x71, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x3c, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x6c, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x73, 0x22, 0x5b, 0x0a, 0x0b, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x3c, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x6c, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x22, 0x4f, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x72, 0x6c, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x25, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x4c, 0x0a, 0x07, 0x42, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x12, 0x36, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74,
	0x2e, 0x6c, 0x62, 0x2e, 0x49, 0x50, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x48, 0x00, 0x52,
	0x09, 0x69, 0x70, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x22, 0x4a, 0x0a, 0x09, 0x49, 0x50, 0x42, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x72, 0x6c, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x50, 0x61, 0x74,
	0x68, 0x22, 0x73, 0x0a, 0x0a, 0x50, 0x6f, 0x6f, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12,
	0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x6c, 0x62, 0x2e, 0x50, 0x6f, 0x6f,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x35, 0x0a, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x6c, 0x62, 0x2e, 0x42,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x08, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x22, 0x71, 0x0a, 0x0d, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x2d, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x6f, 0x6c, 0x6c, 0x6f,
	0x75, 0x74, 0x2e, 0x6c, 0x62, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x07, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74,
	0x2e, 0x6c, 0x62, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x0a, 0x41, 0x64,
	0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x12, 0x31, 0x0a, 0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e,
	0x6c, 0x62, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x6f, 0x6f,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72,
	0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x6c, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x22, 0x0d, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x29, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0x10,
	0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x58, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x2d, 0x0a, 0x07, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72,
	0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x6c, 0x62, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x22, 0x10, 0x0a, 0x0e, 0x41, 0x64,
	0x64, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x5b, 0x0a, 0x10,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x2d, 0x0a, 0x07, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x6f,
	0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x6c, 0x62, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x22, 0x13, 0x0a, 0x11, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x57,
	0x0a, 0x0d, 0x50, 0x6f, 0x6f, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x71, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x73, 0x69, 0x63, 0x6b, 0x22, 0x40, 0x0a, 0x0e, 0x50, 0x6f, 0x6f, 0x6c, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x6f, 0x6c, 0x6c,
	0x6f, 0x75, 0x74, 0x2e, 0x6c, 0x62, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2a, 0x26, 0x0a, 0x08, 0x50, 0x6f, 0x6f,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x54, 0x5f, 0x50, 0x32, 0x43, 0x10,
	0x01, 0x2a, 0x48, 0x0a, 0x0a, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0e, 0x0a, 0x0a, 0x50, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x50, 0x53, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x50, 0x53, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x53,
	0x5f, 0x44, 0x45, 0x47, 0x52, 0x41, 0x44, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x3c, 0x0a, 0x0d, 0x42,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x0a,
	0x42, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x42, 0x53, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x42, 0x53, 0x5f, 0x53, 0x49, 0x43, 0x4b, 0x10, 0x02, 0x32, 0xf1, 0x02, 0x0a, 0x0c, 0x4c, 0x6f,
	0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x07, 0x41, 0x64,
	0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x16, 0x2e, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e,
	0x6c, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e,
	0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x6c, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x19, 0x2e, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74,
	0x2e, 0x6c, 0x62, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x71, 0x1a, 0x1a, 0x2e, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x6c, 0x62, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x45, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x19, 0x2e,
	0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x6c, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x42, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x72, 0x6f, 0x6c, 0x6c, 0x6f,
	0x75, 0x74, 0x2e, 0x6c, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x1c, 0x2e, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75,
	0x74, 0x2e, 0x6c, 0x62, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e,
	0x6c, 0x62, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0a, 0x50, 0x6f, 0x6f, 0x6c, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x12, 0x19, 0x2e, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x6c,
	0x62, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x71, 0x1a,
	0x1a, 0x2e, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x6c, 0x62, 0x2e, 0x50, 0x6f, 0x6f,
	0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x42, 0x52, 0x5a,
	0x50, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x61, 0x63, 0x6b,
	0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2f, 0x47, 0x6f, 0x2d, 0x66,
	0x6f, 0x72, 0x2d, 0x44, 0x65, 0x76, 0x4f, 0x70, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x2f, 0x31, 0x2f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x36, 0x2f, 0x72, 0x6f,
	0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2f, 0x6c, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6c,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lb_proto_rawDescOnce sync.Once
	file_lb_proto_rawDescData = file_lb_proto_rawDesc
)

func file_lb_proto_rawDescGZIP() []byte {
	file_lb_proto_rawDescOnce.Do(func() {
		file_lb_proto_rawDescData = protoimpl.X.CompressGZIP(file_lb_proto_rawDescData)
	})
	return file_lb_proto_rawDescData
}

var file_lb_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_lb_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_lb_proto_goTypes = []interface{}{
	(PoolType)(0),             // 0: rollout.lb.PoolType
	(PoolStatus)(0),           // 1: rollout.lb.PoolStatus
	(BackendStatus)(0),        // 2: rollout.lb.BackendStatus
	(*HealthChecks)(nil),      // 3: rollout.lb.HealthChecks
	(*HealthCheck)(nil),       // 4: rollout.lb.HealthCheck
	(*StatusCheck)(nil),       // 5: rollout.lb.StatusCheck
	(*Backend)(nil),           // 6: rollout.lb.Backend
	(*IPBackend)(nil),         // 7: rollout.lb.IPBackend
	(*PoolHealth)(nil),        // 8: rollout.lb.PoolHealth
	(*BackendHealth)(nil),     // 9: rollout.lb.BackendHealth
	(*AddPoolReq)(nil),        // 10: rollout.lb.AddPoolReq
	(*AddPoolResp)(nil),       // 11: rollout.lb.AddPoolResp
	(*RemovePoolReq)(nil),     // 12: rollout.lb.RemovePoolReq
	(*RemovePoolResp)(nil),    // 13: rollout.lb.RemovePoolResp
	(*AddBackendReq)(nil),     // 14: rollout.lb.AddBackendReq
	(*AddBackendResp)(nil),    // 15: rollout.lb.AddBackendResp
	(*RemoveBackendReq)(nil),  // 16: rollout.lb.RemoveBackendReq
	(*RemoveBackendResp)(nil), // 17: rollout.lb.RemoveBackendResp
	(*PoolHealthReq)(nil),     // 18: rollout.lb.PoolHealthReq
	(*PoolHealthResp)(nil),    // 19: rollout.lb.PoolHealthResp
}
var file_lb_proto_depIdxs = []int32{
	4,  // 0: rollout.lb.HealthChecks.health_checks:type_name -> rollout.lb.HealthCheck
	5,  // 1: rollout.lb.HealthCheck.status_check:type_name -> rollout.lb.StatusCheck
	7,  // 2: rollout.lb.Backend.ip_backend:type_name -> rollout.lb.IPBackend
	1,  // 3: rollout.lb.PoolHealth.status:type_name -> rollout.lb.PoolStatus
	9,  // 4: rollout.lb.PoolHealth.backends:type_name -> rollout.lb.BackendHealth
	6,  // 5: rollout.lb.BackendHealth.backend:type_name -> rollout.lb.Backend
	2,  // 6: rollout.lb.BackendHealth.status:type_name -> rollout.lb.BackendStatus
	0,  // 7: rollout.lb.AddPoolReq.pool_type:type_name -> rollout.lb.PoolType
	3,  // 8: rollout.lb.AddPoolReq.health_checks:type_name -> rollout.lb.HealthChecks
	6,  // 9: rollout.lb.AddBackendReq.backend:type_name -> rollout.lb.Backend
	6,  // 10: rollout.lb.RemoveBackendReq.backend:type_name -> rollout.lb.Backend
	8,  // 11: rollout.lb.PoolHealthResp.health:type_name -> rollout.lb.PoolHealth
	10, // 12: rollout.lb.LoadBalancer.AddPool:input_type -> rollout.lb.AddPoolReq
	12, // 13: rollout.lb.LoadBalancer.RemovePool:input_type -> rollout.lb.RemovePoolReq
	14, // 14: rollout.lb.LoadBalancer.AddBackend:input_type -> rollout.lb.AddBackendReq
	16, // 15: rollout.lb.LoadBalancer.RemoveBackend:input_type -> rollout.lb.RemoveBackendReq
	18, // 16: rollout.lb.LoadBalancer.PoolHealth:input_type -> rollout.lb.PoolHealthReq
	11, // 17: rollout.lb.LoadBalancer.AddPool:output_type -> rollout.lb.AddPoolResp
	13, // 18: rollout.lb.LoadBalancer.RemovePool:output_type -> rollout.lb.RemovePoolResp
	15, // 19: rollout.lb.LoadBalancer.AddBackend:output_type -> rollout.lb.AddBackendResp
	17, // 20: rollout.lb.LoadBalancer.RemoveBackend:output_type -> rollout.lb.RemoveBackendResp
	19, // 21: rollout.lb.LoadBalancer.PoolHealth:output_type -> rollout.lb.PoolHealthResp
	17, // [17:22] is the sub-list for method output_type
	12, // [12:17] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_lb_proto_init() }
func file_lb_proto_init() {
	if File_lb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_lb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthChecks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPBackend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolHealth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackendHealth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPoolReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPoolResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lb_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePoolReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lb_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePoolResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lb_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddBackendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lb_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddBackendResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lb_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveBackendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lb_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveBackendResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lb_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolHealthReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lb_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolHealthResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_lb_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*HealthCheck_StatusCheck)(nil),
	}
	file_lb_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Backend_IpBackend)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lb_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_lb_proto_goTypes,
		DependencyIndexes: file_lb_proto_depIdxs,
		EnumInfos:         file_lb_proto_enumTypes,
		MessageInfos:      file_lb_proto_msgTypes,
	}.Build()
	File_lb_proto = out.File
	file_lb_proto_rawDesc = nil
	file_lb_proto_goTypes = nil
	file_lb_proto_depIdxs = nil
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OpsClient is the client API for Ops service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpsClient interface {
	// ListTraces that the Jaeger has for our application.
	ListTraces(ctx context.Context, in *ListTracesReq, opts ...grpc.CallOption) (*ListTracesResp, error)
	// ShowTrace returns the URL of a trace you ask for.
	ShowTrace(ctx context.Context, in *ShowTraceReq, opts ...grpc.CallOption) (*ShowTraceResp, error)
	// ShowLogs extracts the logs from a trace.
	ShowLogs(ctx context.Context, in *ShowLogsReq, opts ...grpc.CallOption) (*ShowLogsResp, error)
	// ChangeSampling changes the sampling the service is currently using for its traces.
	ChangeSampling(ctx context.Context, in *ChangeSamplingReq, opts ...grpc.CallOption) (*ChangeSamplingResp, error)
	// DeployedVersion returns the currently deployed version of the application.
	DeployedVersion(ctx context.Context, in *DeployedVersionReq, opts ...grpc.CallOption) (*DeployedVersionResp, error)
	// Alerts returns the currently firing alerts.
	Alerts(ctx context.Context, in *AlertsReq, opts ...grpc.CallOption) (*AlertsResp, error)
}

type opsClient struct {
	cc grpc.ClientConnInterface
}

func NewOpsClient(cc grpc.ClientConnInterface) OpsClient {
	return &opsClient{cc}
}

func (c *opsClient) ListTraces(ctx context.Context, in *ListTracesReq, opts ...grpc.CallOption) (*ListTracesResp, error) {
	out := new(ListTracesResp)
	err := c.cc.Invoke(ctx, "/ops.Ops/ListTraces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opsClient) ShowTrace(ctx context.Context, in *ShowTraceReq, opts ...grpc.CallOption) (*ShowTraceResp, error) {
	out := new(ShowTraceResp)
	err := c.cc.Invoke(ctx, "/ops.Ops/ShowTrace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opsClient) ShowLogs(ctx context.Context, in *ShowLogsReq, opts ...grpc.CallOption) (*ShowLogsResp, error) {
	out := new(ShowLogsResp)
	err := c.cc.Invoke(ctx, "/ops.Ops/ShowLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opsClient) ChangeSampling(ctx context.Context, in *ChangeSamplingReq, opts ...grpc.CallOption) (*ChangeSamplingResp, error) {
	out := new(ChangeSamplingResp)
	err := c.cc.Invoke(ctx, "/ops.Ops/ChangeSampling", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opsClient) DeployedVersion(ctx context.Context, in *DeployedVersionReq, opts ...grpc.CallOption) (*DeployedVersionResp, error) {
	out := new(DeployedVersionResp)
	err := c.cc.Invoke(ctx, "/ops.Ops/DeployedVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opsClient) Alerts(ctx context.Context, in *AlertsReq, opts ...grpc.CallOption) (*AlertsResp, error) {
	out := new(AlertsResp)
	err := c.cc.Invoke(ctx, "/ops.Ops/Alerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpsServer is the server API for Ops service.
// All implementations must embed UnimplementedOpsServer
// for forward compatibility
type OpsServer interface {
	// ListTraces that the Jaeger has for our application.
	ListTraces(context.Context, *ListTracesReq) (*ListTracesResp, error)
	// ShowTrace returns the URL of a trace you ask for.
	ShowTrace(context.Context, *ShowTraceReq) (*ShowTraceResp, error)
	// ShowLogs extracts the logs from a trace.
	ShowLogs(context.Context, *ShowLogsReq) (*ShowLogsResp, error)
	// ChangeSampling changes the sampling the service is currently using for its traces.
	ChangeSampling(context.Context, *ChangeSamplingReq) (*ChangeSamplingResp, error)
	// DeployedVersion returns the currently deployed version of the application.
	DeployedVersion(context.Context, *DeployedVersionReq) (*DeployedVersionResp, error)
	// Alerts returns the currently firing alerts.
	Alerts(context.Context, *AlertsReq) (*AlertsResp, error)
	mustEmbedUnimplementedOpsServer()
}

// UnimplementedOpsServer must be embedded to have forward compatible implementations.
type UnimplementedOpsServer struct {
}

func (UnimplementedOpsServer) ListTraces(context.Context, *ListTracesReq) (*ListTracesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTraces not implemented")
}
func (UnimplementedOpsServer) ShowTrace(context.Context, *ShowTraceReq) (*ShowTraceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowTrace not implemented")
}
func (UnimplementedOpsServer) ShowLogs(context.Context, *ShowLogsReq) (*ShowLogsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowLogs not implemented")
}
func (UnimplementedOpsServer) ChangeSampling(context.Context, *ChangeSamplingReq) (*ChangeSamplingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeSampling not implemented")
}
func (UnimplementedOpsServer) DeployedVersion(context.Context, *DeployedVersionReq) (*DeployedVersionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployedVersion not implemented")
}
func (UnimplementedOpsServer) Alerts(context.Context, *AlertsReq) (*AlertsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Alerts not implemented")
}
func (UnimplementedOpsServer) mustEmbedUnimplementedOpsServer() {}

// UnsafeOpsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpsServer will
// result in compilation errors.
type UnsafeOpsServer interface {
	mustEmbedUnimplementedOpsServer()
}

func RegisterOpsServer(s grpc.ServiceRegistrar, srv OpsServer) {
	s.RegisterService(&Ops_ServiceDesc, srv)
}

func _Ops_ListTraces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTracesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpsServer).ListTraces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ops.Ops/ListTraces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpsServer).ListTraces(ctx, req.(*ListTracesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ops_ShowTrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowTraceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpsServer).ShowTrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ops.Ops/ShowTrace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpsServer).ShowTrace(ctx, req.(*ShowTraceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ops_ShowLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowLogsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpsServer).ShowLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ops.Ops/ShowLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpsServer).ShowLogs(ctx, req.(*ShowLogsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ops_ChangeSampling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeSamplingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpsServer).ChangeSampling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ops.Ops/ChangeSampling",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpsServer).ChangeSampling(ctx, req.(*ChangeSamplingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ops_DeployedVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployedVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpsServer).DeployedVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ops.Ops/DeployedVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpsServer).DeployedVersion(ctx, req.(*DeployedVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ops_Alerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpsServer).Alerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ops.Ops/Alerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpsServer).Alerts(ctx, req.(*AlertsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Ops_ServiceDesc is the grpc.ServiceDesc for Ops service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ops_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ops.Ops",
	HandlerType: (*OpsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTraces",
			Handler:    _Ops_ListTraces_Handler,
		},
		{
			MethodName: "ShowTrace",
			Handler:    _Ops_ShowTrace_Handler,
		},
		{
			MethodName: "ShowLogs",
			Handler:    _Ops_ShowLogs_Handler,
		},
		{
			MethodName: "ChangeSampling",
			Handler:    _Ops_ChangeSampling_Handler,
		},
		{
			MethodName: "DeployedVersion",
			Handler:    _Ops_DeployedVersion_Handler,
		},
		{
			MethodName: "Alerts",
			Handler:    _Ops_Alerts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ops.proto",
}

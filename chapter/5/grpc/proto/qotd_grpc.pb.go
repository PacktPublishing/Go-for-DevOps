// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package qotd

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QOTDClient is the client API for QOTD service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QOTDClient interface {
	GetQOTD(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error)
}

type qOTDClient struct {
	cc grpc.ClientConnInterface
}

func NewQOTDClient(cc grpc.ClientConnInterface) QOTDClient {
	return &qOTDClient{cc}
}

func (c *qOTDClient) GetQOTD(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error) {
	out := new(GetResp)
	err := c.cc.Invoke(ctx, "/qotd.QOTD/GetQOTD", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QOTDServer is the server API for QOTD service.
// All implementations must embed UnimplementedQOTDServer
// for forward compatibility
type QOTDServer interface {
	GetQOTD(context.Context, *GetReq) (*GetResp, error)
	mustEmbedUnimplementedQOTDServer()
}

// UnimplementedQOTDServer must be embedded to have forward compatible implementations.
type UnimplementedQOTDServer struct {
}

func (UnimplementedQOTDServer) GetQOTD(context.Context, *GetReq) (*GetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQOTD not implemented")
}
func (UnimplementedQOTDServer) mustEmbedUnimplementedQOTDServer() {}

// UnsafeQOTDServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QOTDServer will
// result in compilation errors.
type UnsafeQOTDServer interface {
	mustEmbedUnimplementedQOTDServer()
}

func RegisterQOTDServer(s grpc.ServiceRegistrar, srv QOTDServer) {
	s.RegisterService(&QOTD_ServiceDesc, srv)
}

func _QOTD_GetQOTD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QOTDServer).GetQOTD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qotd.QOTD/GetQOTD",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QOTDServer).GetQOTD(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

// QOTD_ServiceDesc is the grpc.ServiceDesc for QOTD service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QOTD_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qotd.QOTD",
	HandlerType: (*QOTDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetQOTD",
			Handler:    _QOTD_GetQOTD_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qotd.proto",
}
